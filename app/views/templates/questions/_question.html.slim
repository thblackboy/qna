.question id = question.id
  .votes
    -if current_user && !current_user.author_of?(question)
      -if current_user&.vote_to(question).present?
        = link_to  "Delete vote", vote_path(current_user.vote_to(question)), method: :delete, class: 'delete-vote', data: { type: :json }, remote: true
      -else
        = link_to  "Vote Up", vote_up_question_path(question), method: :post, class: 'do-vote', data: { type: :json }, remote: true
        = link_to  "Vote Down", vote_down_question_path(question), method: :post, class: 'do-vote', data: { type: :json }, remote: true
    p = question.vote_difference
  .title
    = question.title
  .actions
    = link_to  "Show", question
    -if current_user&.author_of?(question)
      = link_to  "Delete", question_path(question), method: :delete
      = link_to  "Edit", "#", class: 'edit-question-link', data: { question_id: question.id }
  p Comments:
  .comments
    = render question.comments
    -if current_user
      = form_with url: url_for(add_comment_question_path(question)), local: false, method: :post do |f|
        = f.label :body, "Comment body"
        = f.text_field :body
        = f.submit "Add comment"
  .question-errors id = question.id
    = render 'shared/errors', resource: question
  = form_with model: question ,
                local: false,
                html: { style: 'display: none',
                        id: "edit-question-#{question.id}" } do |f| 
    .field 
      =f.label :title, 'Edit title'
      =f.text_field :title
    .field
      =f.label :body, 'Edit body'
      =f.text_area :body
    .field
      =f.label :files
      =f.file_field :files, multiple: true, direct_upload: true
    p
      =f.submit 'Save'
